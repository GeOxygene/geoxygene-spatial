/* Generated By:JavaCC: Do not edit this line. WktAwtTokenManager.java */
package fr.ign.cogit.geoxygene.util.conversion;

/** Token Manager. */
public class WktAwtTokenManager implements WktAwtConstants {

  /** Debug output. */
  public java.io.PrintStream debugStream = System.out;

  /** Set debug output. */
  public void setDebugStream(java.io.PrintStream ds) {
    this.debugStream = ds;
  }

  private final int jjStopStringLiteralDfa_0(int pos, long active0) {
    switch (pos) {
      default:
        return -1;
    }
  }

  private final int jjStartNfa_0(int pos, long active0) {
    return this.jjMoveNfa_0(this.jjStopStringLiteralDfa_0(pos, active0),
        pos + 1);
  }

  private int jjStopAtPos(int pos, int kind) {
    this.jjmatchedKind = kind;
    this.jjmatchedPos = pos;
    return pos + 1;
  }

  private int jjMoveStringLiteralDfa0_0() {
    switch (this.curChar) {
      case 10:
        return this.jjStopAtPos(0, 6);
      case 40:
        return this.jjStopAtPos(0, 9);
      case 41:
        return this.jjStopAtPos(0, 10);
      case 44:
        return this.jjStopAtPos(0, 12);
      case 59:
        return this.jjStopAtPos(0, 21);
      case 69:
        return this.jjMoveStringLiteralDfa1_0(0x800L);
      case 71:
        return this.jjMoveStringLiteralDfa1_0(0x80000L);
      case 76:
        return this.jjMoveStringLiteralDfa1_0(0x4000L);
      case 77:
        return this.jjMoveStringLiteralDfa1_0(0x58000L);
      case 80:
        return this.jjMoveStringLiteralDfa1_0(0x22000L);
      case 83:
        return this.jjMoveStringLiteralDfa1_0(0x100000L);
      default:
        return this.jjMoveNfa_0(0, 0);
    }
  }

  private int jjMoveStringLiteralDfa1_0(long active0) {
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(0, active0);
      return 1;
    }
    switch (this.curChar) {
      case 69:
        return this.jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 73:
        return this.jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 77:
        return this.jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 79:
        return this.jjMoveStringLiteralDfa2_0(active0, 0x22000L);
      case 82:
        return this.jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 85:
        return this.jjMoveStringLiteralDfa2_0(active0, 0x58000L);
      default:
        break;
    }
    return this.jjStartNfa_0(0, active0);
  }

  private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(0, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(1, active0);
      return 2;
    }
    switch (this.curChar) {
      case 73:
        return this.jjMoveStringLiteralDfa3_0(active0, 0x102000L);
      case 76:
        return this.jjMoveStringLiteralDfa3_0(active0, 0x78000L);
      case 78:
        return this.jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 79:
        return this.jjMoveStringLiteralDfa3_0(active0, 0x80000L);
      case 80:
        return this.jjMoveStringLiteralDfa3_0(active0, 0x800L);
      default:
        break;
    }
    return this.jjStartNfa_0(1, active0);
  }

  private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(1, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(2, active0);
      return 3;
    }
    switch (this.curChar) {
      case 68:
        return this.jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 69:
        return this.jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 77:
        return this.jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 78:
        return this.jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 84:
        return this.jjMoveStringLiteralDfa4_0(active0, 0x58800L);
      case 89:
        return this.jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default:
        break;
    }
    return this.jjStartNfa_0(2, active0);
  }

  private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(2, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(3, active0);
      return 4;
    }
    switch (this.curChar) {
      case 61:
        if ((active0 & 0x100000L) != 0L) {
          return this.jjStopAtPos(4, 20);
        }
        break;
      case 69:
        return this.jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 71:
        return this.jjMoveStringLiteralDfa5_0(active0, 0x20000L);
      case 73:
        return this.jjMoveStringLiteralDfa5_0(active0, 0x58000L);
      case 83:
        return this.jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 84:
        if ((active0 & 0x2000L) != 0L) {
          return this.jjStopAtPos(4, 13);
        }
        break;
      case 89:
        if ((active0 & 0x800L) != 0L) {
          return this.jjStopAtPos(4, 11);
        }
        break;
      default:
        break;
    }
    return this.jjStartNfa_0(3, active0);
  }

  private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(3, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(4, active0);
      return 5;
    }
    switch (this.curChar) {
      case 76:
        return this.jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 79:
        return this.jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 80:
        return this.jjMoveStringLiteralDfa6_0(active0, 0x48000L);
      case 84:
        return this.jjMoveStringLiteralDfa6_0(active0, 0x84000L);
      default:
        break;
    }
    return this.jjStartNfa_0(4, active0);
  }

  private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(4, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(5, active0);
      return 6;
    }
    switch (this.curChar) {
      case 73:
        return this.jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 78:
        if ((active0 & 0x20000L) != 0L) {
          return this.jjStopAtPos(6, 17);
        }
        break;
      case 79:
        return this.jjMoveStringLiteralDfa7_0(active0, 0x48000L);
      case 82:
        return this.jjMoveStringLiteralDfa7_0(active0, 0x84000L);
      default:
        break;
    }
    return this.jjStartNfa_0(5, active0);
  }

  private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(5, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(6, active0);
      return 7;
    }
    switch (this.curChar) {
      case 73:
        return this.jjMoveStringLiteralDfa8_0(active0, 0xc000L);
      case 76:
        return this.jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      case 78:
        return this.jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 89:
        return this.jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      default:
        break;
    }
    return this.jjStartNfa_0(6, active0);
  }

  private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(6, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(7, active0);
      return 8;
    }
    switch (this.curChar) {
      case 67:
        return this.jjMoveStringLiteralDfa9_0(active0, 0x80000L);
      case 69:
        return this.jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 78:
        return this.jjMoveStringLiteralDfa9_0(active0, 0xc000L);
      case 89:
        return this.jjMoveStringLiteralDfa9_0(active0, 0x40000L);
      default:
        break;
    }
    return this.jjStartNfa_0(7, active0);
  }

  private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(7, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(8, active0);
      return 9;
    }
    switch (this.curChar) {
      case 71:
        if ((active0 & 0x4000L) != 0L) {
          return this.jjStopAtPos(9, 14);
        }
        return this.jjMoveStringLiteralDfa10_0(active0, 0x40000L);
      case 79:
        return this.jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 83:
        return this.jjMoveStringLiteralDfa10_0(active0, 0x10000L);
      case 84:
        if ((active0 & 0x8000L) != 0L) {
          return this.jjStopAtPos(9, 15);
        }
        break;
      default:
        break;
    }
    return this.jjStartNfa_0(8, active0);
  }

  private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(8, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(9, active0);
      return 10;
    }
    switch (this.curChar) {
      case 76:
        return this.jjMoveStringLiteralDfa11_0(active0, 0x80000L);
      case 79:
        return this.jjMoveStringLiteralDfa11_0(active0, 0x40000L);
      case 84:
        return this.jjMoveStringLiteralDfa11_0(active0, 0x10000L);
      default:
        break;
    }
    return this.jjStartNfa_0(9, active0);
  }

  private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(9, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(10, active0);
      return 11;
    }
    switch (this.curChar) {
      case 76:
        return this.jjMoveStringLiteralDfa12_0(active0, 0x80000L);
      case 78:
        if ((active0 & 0x40000L) != 0L) {
          return this.jjStopAtPos(11, 18);
        }
        break;
      case 82:
        return this.jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      default:
        break;
    }
    return this.jjStartNfa_0(10, active0);
  }

  private int jjMoveStringLiteralDfa12_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(10, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(11, active0);
      return 12;
    }
    switch (this.curChar) {
      case 69:
        return this.jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 73:
        return this.jjMoveStringLiteralDfa13_0(active0, 0x10000L);
      default:
        break;
    }
    return this.jjStartNfa_0(11, active0);
  }

  private int jjMoveStringLiteralDfa13_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(11, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(12, active0);
      return 13;
    }
    switch (this.curChar) {
      case 67:
        return this.jjMoveStringLiteralDfa14_0(active0, 0x80000L);
      case 78:
        return this.jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      default:
        break;
    }
    return this.jjStartNfa_0(12, active0);
  }

  private int jjMoveStringLiteralDfa14_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(12, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(13, active0);
      return 14;
    }
    switch (this.curChar) {
      case 71:
        if ((active0 & 0x10000L) != 0L) {
          return this.jjStopAtPos(14, 16);
        }
        break;
      case 84:
        return this.jjMoveStringLiteralDfa15_0(active0, 0x80000L);
      default:
        break;
    }
    return this.jjStartNfa_0(13, active0);
  }

  private int jjMoveStringLiteralDfa15_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(13, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(14, active0);
      return 15;
    }
    switch (this.curChar) {
      case 73:
        return this.jjMoveStringLiteralDfa16_0(active0, 0x80000L);
      default:
        break;
    }
    return this.jjStartNfa_0(14, active0);
  }

  private int jjMoveStringLiteralDfa16_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(14, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(15, active0);
      return 16;
    }
    switch (this.curChar) {
      case 79:
        return this.jjMoveStringLiteralDfa17_0(active0, 0x80000L);
      default:
        break;
    }
    return this.jjStartNfa_0(15, active0);
  }

  private int jjMoveStringLiteralDfa17_0(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return this.jjStartNfa_0(15, old0);
    }
    try {
      this.curChar = this.input_stream.readChar();
    } catch (java.io.IOException e) {
      this.jjStopStringLiteralDfa_0(16, active0);
      return 17;
    }
    switch (this.curChar) {
      case 78:
        if ((active0 & 0x80000L) != 0L) {
          return this.jjStopAtPos(17, 19);
        }
        break;
      default:
        break;
    }
    return this.jjStartNfa_0(16, active0);
  }

  private int jjMoveNfa_0(int startState, int curPos) {
    int startsAt = 0;
    this.jjnewStateCnt = 51;
    int i = 1;
    this.jjstateSet[0] = startState;
    int kind = 0x7fffffff;
    for (;;) {
      if (++this.jjround == 0x7fffffff) {
        this.ReInitRounds();
      }
      if (this.curChar < 64) {
        long l = 1L << this.curChar;
        do {
          switch (this.jjstateSet[--i]) {
            case 0:
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 1) {
                  kind = 1;
                }
                this.jjCheckNAddStates(0, 15);
              } else if ((0x280000000000L & l) != 0L) {
                this.jjAddStates(16, 19);
              } else if (this.curChar == 46) {
                this.jjCheckNAddStates(20, 23);
              }
              break;
            case 1:
              if (this.curChar == 46) {
                this.jjCheckNAddTwoStates(2, 23);
              }
              break;
            case 2:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddStates(24, 26);
              }
              break;
            case 4:
              if ((0x280000000000L & l) != 0L) {
                this.jjCheckNAdd(5);
              }
              break;
            case 5:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddTwoStates(5, 6);
              }
              break;
            case 6:
              if (this.curChar == 32) {
                this.jjCheckNAddStates(27, 30);
              }
              break;
            case 7:
              if ((0x280000000000L & l) != 0L) {
                this.jjCheckNAddTwoStates(8, 14);
              }
              break;
            case 8:
              if (this.curChar == 46) {
                this.jjCheckNAddTwoStates(9, 13);
              }
              break;
            case 9:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAddTwoStates(9, 10);
              break;
            case 11:
              if ((0x280000000000L & l) != 0L) {
                this.jjCheckNAdd(12);
              }
              break;
            case 12:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAdd(12);
              break;
            case 13:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAdd(13);
              break;
            case 14:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAddStates(31, 37);
              break;
            case 15:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAddTwoStates(15, 10);
              break;
            case 16:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAddStates(38, 40);
              break;
            case 17:
              if (this.curChar == 46) {
                this.jjCheckNAdd(18);
              }
              break;
            case 18:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAddTwoStates(18, 10);
              break;
            case 19:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAddTwoStates(19, 20);
              break;
            case 20:
              if (this.curChar == 46) {
                this.jjCheckNAdd(21);
              }
              break;
            case 21:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAdd(21);
              break;
            case 22:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 5) {
                kind = 5;
              }
              this.jjCheckNAdd(22);
              break;
            case 23:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddTwoStates(23, 6);
              }
              break;
            case 24:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddStates(41, 48);
              }
              break;
            case 25:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddStates(49, 51);
              }
              break;
            case 26:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddStates(52, 55);
              }
              break;
            case 27:
              if (this.curChar == 46) {
                this.jjCheckNAdd(28);
              }
              break;
            case 28:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddStates(56, 58);
              }
              break;
            case 29:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddStates(59, 61);
              }
              break;
            case 30:
              if (this.curChar == 46) {
                this.jjCheckNAdd(31);
              }
              break;
            case 31:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddTwoStates(31, 6);
              }
              break;
            case 32:
              if ((0x3ff000000000000L & l) != 0L) {
                this.jjCheckNAddTwoStates(32, 6);
              }
              break;
            case 33:
              if (this.curChar == 46) {
                this.jjCheckNAddTwoStates(34, 38);
              }
              break;
            case 34:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddTwoStates(34, 35);
              break;
            case 36:
              if ((0x280000000000L & l) != 0L) {
                this.jjCheckNAdd(37);
              }
              break;
            case 37:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAdd(37);
              break;
            case 38:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAdd(38);
              break;
            case 39:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddStates(62, 68);
              break;
            case 40:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddTwoStates(40, 35);
              break;
            case 41:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddStates(69, 71);
              break;
            case 42:
              if (this.curChar == 46) {
                this.jjCheckNAdd(43);
              }
              break;
            case 43:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddTwoStates(43, 35);
              break;
            case 44:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddTwoStates(44, 45);
              break;
            case 45:
              if (this.curChar == 46) {
                this.jjCheckNAdd(46);
              }
              break;
            case 46:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAdd(46);
              break;
            case 47:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAdd(47);
              break;
            case 48:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 1) {
                kind = 1;
              }
              this.jjCheckNAddStates(0, 15);
              break;
            case 49:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 3) {
                kind = 3;
              }
              this.jjCheckNAdd(49);
              break;
            case 50:
              if (this.curChar == 46) {
                this.jjCheckNAddStates(20, 23);
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else if (this.curChar < 128) {
        long l = 1L << (this.curChar & 077);
        do {
          switch (this.jjstateSet[--i]) {
            case 3:
              if ((0x2000000020L & l) != 0L) {
                this.jjAddStates(72, 73);
              }
              break;
            case 10:
              if ((0x2000000020L & l) != 0L) {
                this.jjAddStates(74, 75);
              }
              break;
            case 35:
              if ((0x2000000020L & l) != 0L) {
                this.jjAddStates(76, 77);
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      } else {
        int i2 = (this.curChar & 0xff) >> 6;
        long l2 = 1L << (this.curChar & 077);
        do {
          switch (this.jjstateSet[--i]) {
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        this.jjmatchedKind = kind;
        this.jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = this.jjnewStateCnt) == (startsAt = 51 - (this.jjnewStateCnt = startsAt))) {
        return curPos;
      }
      try {
        this.curChar = this.input_stream.readChar();
      } catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  static final int[] jjnextStates = { 40, 41, 42, 35, 44, 45, 47, 49, 25, 26,
      27, 3, 29, 30, 32, 6, 1, 24, 33, 39, 34, 38, 2, 23, 2, 3, 6, 6, 7, 8, 14,
      15, 16, 17, 10, 19, 20, 22, 16, 17, 10, 25, 26, 27, 3, 29, 30, 32, 6, 25,
      3, 6, 26, 27, 3, 6, 28, 3, 6, 29, 30, 6, 40, 41, 42, 35, 44, 45, 47, 41,
      42, 35, 4, 5, 11, 12, 36, 37, };

  /** Token literal values. */
  public static final String[] jjstrLiteralImages = {
      "",
      null,
      null,
      null,
      null,
      null,
      "\12",
      null,
      null,
      "\50",
      "\51",
      "\105\115\120\124\131",
      "\54",
      "\120\117\111\116\124",
      "\114\111\116\105\123\124\122\111\116\107",
      "\115\125\114\124\111\120\117\111\116\124",
      "\115\125\114\124\111\114\111\116\105\123\124\122\111\116\107",
      "\120\117\114\131\107\117\116",
      "\115\125\114\124\111\120\117\114\131\107\117\116",
      "\107\105\117\115\105\124\122\131\103\117\114\114\105\103\124\111\117\116",
      "\123\122\111\104\75", "\73", };

  /** Lexer state names. */
  public static final String[] lexStateNames = { "DEFAULT", };
  static final long[] jjtoToken = { 0x3ffe6bL, };
  static final long[] jjtoSkip = { 0x180L, };
  protected SimpleCharStream input_stream;
  private final int[] jjrounds = new int[51];
  private final int[] jjstateSet = new int[102];
  protected char curChar;

  /** Constructor. */
  public WktAwtTokenManager(SimpleCharStream stream) {
    if (SimpleCharStream.staticFlag) {
      throw new Error(
          "ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
    }
    this.input_stream = stream;
  }

  /** Constructor. */
  public WktAwtTokenManager(SimpleCharStream stream, int lexState) {
    this(stream);
    this.SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream) {
    this.jjmatchedPos = this.jjnewStateCnt = 0;
    this.curLexState = this.defaultLexState;
    this.input_stream = stream;
    this.ReInitRounds();
  }

  private void ReInitRounds() {
    int i;
    this.jjround = 0x80000001;
    for (i = 51; i-- > 0;) {
      this.jjrounds[i] = 0x80000000;
    }
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState) {
    this.ReInit(stream);
    this.SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState) {
    if (lexState >= 1 || lexState < 0) {
      throw new TokenMgrError("Error: Ignoring invalid lexical state : "
          + lexState + ". State unchanged.",
          TokenMgrError.INVALID_LEXICAL_STATE);
    } else {
      this.curLexState = lexState;
    }
  }

  protected Token jjFillToken() {
    final Token t;
    final String curTokenImage;
    final int beginLine;
    final int endLine;
    final int beginColumn;
    final int endColumn;
    String im = WktAwtTokenManager.jjstrLiteralImages[this.jjmatchedKind];
    curTokenImage = (im == null) ? this.input_stream.GetImage() : im;
    beginLine = this.input_stream.getBeginLine();
    beginColumn = this.input_stream.getBeginColumn();
    endLine = this.input_stream.getEndLine();
    endColumn = this.input_stream.getEndColumn();
    t = Token.newToken(this.jjmatchedKind, curTokenImage);

    t.beginLine = beginLine;
    t.endLine = endLine;
    t.beginColumn = beginColumn;
    t.endColumn = endColumn;

    return t;
  }

  int curLexState = 0;
  int defaultLexState = 0;
  int jjnewStateCnt;
  int jjround;
  int jjmatchedPos;
  int jjmatchedKind;

  /** Get the next Token. */
  public Token getNextToken() {
    Token matchedToken;
    int curPos = 0;

    EOFLoop: for (;;) {
      try {
        this.curChar = this.input_stream.BeginToken();
      } catch (java.io.IOException e) {
        this.jjmatchedKind = 0;
        matchedToken = this.jjFillToken();
        return matchedToken;
      }

      try {
        this.input_stream.backup(0);
        while (this.curChar <= 32
            && (0x100000200L & (1L << this.curChar)) != 0L) {
          this.curChar = this.input_stream.BeginToken();
        }
      } catch (java.io.IOException e1) {
        continue EOFLoop;
      }
      this.jjmatchedKind = 0x7fffffff;
      this.jjmatchedPos = 0;
      curPos = this.jjMoveStringLiteralDfa0_0();
      if (this.jjmatchedKind != 0x7fffffff) {
        if (this.jjmatchedPos + 1 < curPos) {
          this.input_stream.backup(curPos - this.jjmatchedPos - 1);
        }
        if ((WktAwtTokenManager.jjtoToken[this.jjmatchedKind >> 6] & (1L << (this.jjmatchedKind & 077))) != 0L) {
          matchedToken = this.jjFillToken();
          return matchedToken;
        } else {
          continue EOFLoop;
        }
      }
      int error_line = this.input_stream.getEndLine();
      int error_column = this.input_stream.getEndColumn();
      String error_after = null;
      boolean EOFSeen = false;
      try {
        this.input_stream.readChar();
        this.input_stream.backup(1);
      } catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
        if (this.curChar == '\n' || this.curChar == '\r') {
          error_line++;
          error_column = 0;
        } else {
          error_column++;
        }
      }
      if (!EOFSeen) {
        this.input_stream.backup(1);
        error_after = curPos <= 1 ? "" : this.input_stream.GetImage();
      }
      throw new TokenMgrError(EOFSeen, this.curLexState, error_line,
          error_column, error_after, this.curChar, TokenMgrError.LEXICAL_ERROR);
    }
  }

  private void jjCheckNAdd(int state) {
    if (this.jjrounds[state] != this.jjround) {
      this.jjstateSet[this.jjnewStateCnt++] = state;
      this.jjrounds[state] = this.jjround;
    }
  }

  private void jjAddStates(int start, int end) {
    do {
      this.jjstateSet[this.jjnewStateCnt++] = WktAwtTokenManager.jjnextStates[start];
    } while (start++ != end);
  }

  private void jjCheckNAddTwoStates(int state1, int state2) {
    this.jjCheckNAdd(state1);
    this.jjCheckNAdd(state2);
  }

  private void jjCheckNAddStates(int start, int end) {
    do {
      this.jjCheckNAdd(WktAwtTokenManager.jjnextStates[start]);
    } while (start++ != end);
  }

}
