/* Generated By:JavaCC: Do not edit this line. WktAwt.java */
package fr.ign.cogit.geoxygene.util.conversion;

import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Point2D;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.StringTokenizer;

@SuppressWarnings({ "unchecked", "unqualified-field-access", "nls" })
public class WktAwt implements WktAwtConstants {
  static class EndOfFile extends Exception {
    private static final long serialVersionUID = 1L;
  }

  static class EmptyLine extends Exception {
    private static final long serialVersionUID = 1L;
  }

  /*-----------------------------------------------------*/
  /*- Create AwtShape from Wkt object(s) ----------------*/
  /*-----------------------------------------------------*/

  public static AwtShape makeAwtShape(InputStream in) throws ParseException {
    WktAwt parser = new WktAwt(in);
    AwtAggregate geom = new AwtAggregate();

    while (true) {
      try {
        geom.add(parser.parseOneLine());
      } catch (EndOfFile e) {
        break;
      } catch (EmptyLine e) {
      }
    }
    return geom;
  }

  public static AwtShape makeAwtShape(String wkt) throws ParseException {
    InputStream in = new ByteArrayInputStream(wkt.getBytes());
    return WktAwt.makeAwtShape(in);
  }

  /*-----------------------------------------------------*/
  /*- Main function for testing -------------------------*/
  /*-----------------------------------------------------*/

  static Ellipse2D makeVisiblePoint(Point2D point) {
    return new Ellipse2D.Double(point.getX() - 5, point.getY() - 5, 10, 10);
  }

  final public Point2D point() throws ParseException {
    Token xy;
    xy = this.jj_consume_token(WktAwtConstants.POINT);
    try {
      StringTokenizer tkz = new StringTokenizer(xy.image);
      String xStr = tkz.nextToken();
      String yStr = tkz.nextToken();
      double x = Double.parseDouble(xStr);
      double y = Double.parseDouble(yStr);
      {
        if (true) {
          return new Point2D.Double(x, y);
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public Point2D pointText() throws ParseException {
    Point2D p = new Point2D.Double(Double.NaN, Double.NaN);
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        p = this.point();
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[0] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return p;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public GeneralPath linestringText() throws ParseException {
    GeneralPath lineString = new GeneralPath();
    Point2D p;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        p = this.point();
        lineString.moveTo((float) p.getX(), (float) p.getY());
        label_1: while (true) {
          switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
            case 12:

              break;
            default:
              this.jj_la1[1] = this.jj_gen;
              break label_1;
          }
          this.jj_consume_token(12);
          p = this.point();
          lineString.lineTo((float) p.getX(), (float) p.getY());
        }
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[2] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return lineString;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape polygonText() throws ParseException {
    AwtSurface poly = new AwtSurface();
    GeneralPath lineString;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        lineString = this.linestringText();
        lineString.closePath();
        poly = new AwtSurface(lineString);
        label_2: while (true) {
          switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
            case 12:

              break;
            default:
              this.jj_la1[3] = this.jj_gen;
              break label_2;
          }
          this.jj_consume_token(12);
          lineString = this.linestringText();
          lineString.closePath();
          poly.addInterior(lineString);
        }
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[4] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return poly;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape multipointText() throws ParseException {
    GeneralPath multi = new GeneralPath();
    Point2D p;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        p = this.point();
        multi.append(new GeneralPath(WktAwt.makeVisiblePoint(p)), false);
        label_3: while (true) {
          switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
            case 12:

              break;
            default:
              this.jj_la1[5] = this.jj_gen;
              break label_3;
          }
          this.jj_consume_token(12);
          p = this.point();
          multi.append(new GeneralPath(WktAwt.makeVisiblePoint(p)), false);
        }
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[6] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return new AwtSurface(multi);
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape multilinestringText() throws ParseException {
    GeneralPath multi = new GeneralPath();
    GeneralPath lineString;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        lineString = this.linestringText();
        multi.append(lineString, false);
        label_4: while (true) {
          switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
            case 12:

              break;
            default:
              this.jj_la1[7] = this.jj_gen;
              break label_4;
          }
          this.jj_consume_token(12);
          lineString = this.linestringText();
          multi.append(lineString, false);
        }
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[8] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return new AwtOutline(multi);
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape multipolygonText() throws ParseException {
    AwtAggregate multi = new AwtAggregate();
    AwtShape poly;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        poly = this.polygonText();
        multi.add(poly);
        label_5: while (true) {
          switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
            case 12:

              break;
            default:
              this.jj_la1[9] = this.jj_gen;
              break label_5;
          }
          this.jj_consume_token(12);
          poly = this.polygonText();
          multi.add(poly);
        }
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[10] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return multi;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape geometrycollectionText() throws ParseException {
    AwtAggregate collec = new AwtAggregate();
    AwtShape geom;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 9:
        this.jj_consume_token(9);
        geom = this.geometryTaggedText();
        collec.add(geom);
        label_6: while (true) {
          switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
            case 12:

              break;
            default:
              this.jj_la1[11] = this.jj_gen;
              break label_6;
          }
          this.jj_consume_token(12);
          geom = this.geometryTaggedText();
          collec.add(geom);
        }
        this.jj_consume_token(10);
        break;
      case 11:
        this.jj_consume_token(11);
        break;
      default:
        this.jj_la1[12] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return collec;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape pointTaggedText() throws ParseException {
    Point2D p;
    this.jj_consume_token(13);
    p = this.pointText();
    try {
      {
        if (true) {
          return new AwtSurface(WktAwt.makeVisiblePoint(p));
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape linestringTaggedText() throws ParseException {
    GeneralPath lineString;
    this.jj_consume_token(14);
    lineString = this.linestringText();
    try {
      {
        if (true) {
          return new AwtOutline(lineString);
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape multipointTaggedText() throws ParseException {
    AwtShape multi;
    this.jj_consume_token(15);
    multi = this.multipointText();
    try {
      {
        if (true) {
          return multi;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape multilinestringTaggedText() throws ParseException {
    AwtShape multi;
    this.jj_consume_token(16);
    multi = this.multilinestringText();
    try {
      {
        if (true) {
          return multi;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape polygonTaggedText() throws ParseException {
    AwtShape poly;
    this.jj_consume_token(17);
    poly = this.polygonText();
    try {
      {
        if (true) {
          return poly;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape multipolygonTaggedText() throws ParseException {
    AwtShape multi;
    this.jj_consume_token(18);
    multi = this.multipolygonText();
    try {
      {
        if (true) {
          return multi;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape geometrycollectionTaggedText() throws ParseException {
    AwtShape collec;
    this.jj_consume_token(19);
    collec = this.geometrycollectionText();
    try {
      {
        if (true) {
          return collec;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape geometryTaggedText() throws ParseException {
    AwtShape geom;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 13:
        geom = this.pointTaggedText();
        break;
      case 14:
        geom = this.linestringTaggedText();
        break;
      case 17:
        geom = this.polygonTaggedText();
        break;
      case 15:
        geom = this.multipointTaggedText();
        break;
      case 16:
        geom = this.multilinestringTaggedText();
        break;
      case 18:
        geom = this.multipolygonTaggedText();
        break;
      case 19:
        geom = this.geometrycollectionTaggedText();
        break;
      default:
        this.jj_la1[13] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    try {
      {
        if (true) {
          return geom;
        }
      }
    } catch (Exception e) {
      System.out.println(e);
    }
    throw new Error("Missing return statement in function");
  }

  final public AwtShape parseOneLine() throws ParseException, EmptyLine,
      EndOfFile {
    AwtShape geom;
    switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
        geom = this.geometryTaggedText();
        switch ((this.jj_ntk == -1) ? this.jj_ntk() : this.jj_ntk) {
          case 0:
            this.jj_consume_token(0);
            break;
          case EOL:
            this.jj_consume_token(WktAwtConstants.EOL);
            break;
          default:
            this.jj_la1[14] = this.jj_gen;
            this.jj_consume_token(-1);
            throw new ParseException();
        }
        try {
          {
            if (true) {
              return geom;
            }
          }
        } catch (Exception e) {
          System.out.println(e);
        }
        break;
      case EOL:
        this.jj_consume_token(WktAwtConstants.EOL);
        throw new EmptyLine();
      case 0:
        this.jj_consume_token(0);
        throw new EndOfFile();
      default:
        this.jj_la1[15] = this.jj_gen;
        this.jj_consume_token(-1);
        throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public WktAwtTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
    WktAwt.jj_la1_init_0();
  }

  private static void jj_la1_init_0() {
    WktAwt.jj_la1_0 = new int[] { 0xa00, 0x1000, 0xa00, 0x1000, 0xa00, 0x1000,
        0xa00, 0x1000, 0xa00, 0x1000, 0xa00, 0x1000, 0xa00, 0xfe000, 0x41,
        0xfe041, };
  }

  /** Constructor with InputStream. */
  public WktAwt(java.io.InputStream stream) {
    this(stream, null);
  }

  /** Constructor with InputStream and supplied encoding */
  public WktAwt(java.io.InputStream stream, String encoding) {
    try {
      this.jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    this.token_source = new WktAwtTokenManager(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 16; i++) {
      this.jj_la1[i] = -1;
    }
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
    this.ReInit(stream, null);
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try {
      this.jj_input_stream.ReInit(stream, encoding, 1, 1);
    } catch (java.io.UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
    this.token_source.ReInit(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 16; i++) {
      this.jj_la1[i] = -1;
    }
  }

  /** Constructor. */
  public WktAwt(java.io.Reader stream) {
    this.jj_input_stream = new SimpleCharStream(stream, 1, 1);
    this.token_source = new WktAwtTokenManager(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 16; i++) {
      this.jj_la1[i] = -1;
    }
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    this.jj_input_stream.ReInit(stream, 1, 1);
    this.token_source.ReInit(this.jj_input_stream);
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 16; i++) {
      this.jj_la1[i] = -1;
    }
  }

  /** Constructor with generated Token Manager. */
  public WktAwt(WktAwtTokenManager tm) {
    this.token_source = tm;
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 16; i++) {
      this.jj_la1[i] = -1;
    }
  }

  /** Reinitialise. */
  public void ReInit(WktAwtTokenManager tm) {
    this.token_source = tm;
    this.token = new Token();
    this.jj_ntk = -1;
    this.jj_gen = 0;
    for (int i = 0; i < 16; i++) {
      this.jj_la1[i] = -1;
    }
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = this.token).next != null) {
      this.token = this.token.next;
    } else {
      this.token = this.token.next = this.token_source.getNextToken();
    }
    this.jj_ntk = -1;
    if (this.token.kind == kind) {
      this.jj_gen++;
      return this.token;
    }
    this.token = oldToken;
    this.jj_kind = kind;
    throw this.generateParseException();
  }

  /** Get the next Token. */
  final public Token getNextToken() {
    if (this.token.next != null) {
      this.token = this.token.next;
    } else {
      this.token = this.token.next = this.token_source.getNextToken();
    }
    this.jj_ntk = -1;
    this.jj_gen++;
    return this.token;
  }

  /** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = this.token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) {
        t = t.next;
      } else {
        t = t.next = this.token_source.getNextToken();
      }
    }
    return t;
  }

  private int jj_ntk() {
    if ((this.jj_nt = this.token.next) == null) {
      return (this.jj_ntk = (this.token.next = this.token_source.getNextToken()).kind);
    } else {
      return (this.jj_ntk = this.jj_nt.kind);
    }
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    this.jj_expentries.clear();
    boolean[] la1tokens = new boolean[20];
    if (this.jj_kind >= 0) {
      la1tokens[this.jj_kind] = true;
      this.jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (this.jj_la1[i] == this.jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((WktAwt.jj_la1_0[i] & (1 << j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 20; i++) {
      if (la1tokens[i]) {
        this.jj_expentry = new int[1];
        this.jj_expentry[0] = i;
        this.jj_expentries.add(this.jj_expentry);
      }
    }
    int[][] exptokseq = new int[this.jj_expentries.size()][];
    for (int i = 0; i < this.jj_expentries.size(); i++) {
      exptokseq[i] = (int[]) this.jj_expentries.get(i);
    }
    return new ParseException(this.token, exptokseq, WktAwtConstants.tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
